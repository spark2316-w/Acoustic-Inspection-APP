import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.io import wavfile
from scipy.signal import correlate
from io import BytesIO

# ==== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå .wav ‡πÄ‡∏õ‡πá‡∏ô normalized numpy ====
def audio_to_normalized_numpy(wav_file):
    sample_rate, samples = wavfile.read(wav_file)
    if samples.ndim > 1:
        samples = samples[:, 0]  # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ channel ‡πÅ‡∏£‡∏Å‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô stereo
    samples = samples.astype(np.float32)
    samples -= np.mean(samples)
    samples /= np.std(samples) + 1e-9
    return samples

# ==== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Streamlit ====
st.set_page_config(page_title="üîç WAV Audio Comparison", layout="wide")
st.title("üîç ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏ü‡∏•‡πå WAV ‡∏î‡πâ‡∏ß‡∏¢ Cross-Correlation")

st.markdown("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á (.wav) ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö (.wav) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á")

# ==== ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ====
reference_file = st.file_uploader("üìå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Reference .wav", type=["wav"], key="ref_wav")
test_files = st.file_uploader("üéß ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö (Test .wav)", type=["wav"], accept_multiple_files=True)

# ==== ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏° ====
if reference_file and test_files:
    st.success("‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")

    ref_signal = audio_to_normalized_numpy(reference_file)
    results = []

    for test_file in test_files:
        test_signal = audio_to_normalized_numpy(test_file)

        # ==== ‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì ====
        st.subheader(f"üîä {test_file.name}")
        fig, axs = plt.subplots(2, 1, figsize=(12, 6))
        axs[0].plot(ref_signal, color="blue")
        axs[0].set_title("Reference Signal")
        axs[1].plot(test_signal, color="red")
        axs[1].set_title("Test Signal")
        st.pyplot(fig)

        # ==== ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Cross-Correlation ====
        cross_corr = correlate(ref_signal, test_signal, mode='full', method='auto')
        max_corr = np.max(cross_corr) / len(ref_signal)
        lags = np.arange(-(len(test_signal) - 1), len(ref_signal))

        fig2, ax2 = plt.subplots(figsize=(10, 4))
        ax2.plot(lags, cross_corr)
        ax2.set_title("Cross-Correlation")
        ax2.set_xlabel("Lag")
        ax2.set_ylabel("Correlation")
        ax2.grid(True)
        st.pyplot(fig2)

        # ==== ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á ====
        if max_corr > 0.3:
            similarity = "‚úÖ Very Similar"
        elif max_corr > 0.2:
            similarity = "‚ö†Ô∏è Moderately Similar"
        else:
            similarity = "‚ùå Not Similar"

        results.append({
            "Filename": test_file.name,
            "Max Correlation": round(max_corr, 5),
            "Similarity": similarity
        })

    # ==== ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ====
    df = pd.DataFrame(results)
    st.subheader("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
    st.dataframe(df)

    # ==== ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel ====
    towrite = BytesIO()
    df.to_excel(towrite, index=False, engine='openpyxl')
    towrite.seek(0)
    st.download_button("‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (.xlsx)", towrite, file_name="comparison_results.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
